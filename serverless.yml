service: serverless
frameworkVersion: "3"
useDotenv: true

provider:
  name: aws
  region: us-east-1
  runtime: nodejs18.x
  httpApi:
    authorizers:
      customAuthorizer:
        type: request
        functionName: verifyToken
  iam:
    role:
      managedPolicies:
        - arn:aws:iam::aws:policy/AmazonEventBridgeSchedulerFullAccess
      statements:
        - Effect: Allow
          Action:
            - "sqs:*"
            - "events:*"
            - "ses:*"
            - "dynamodb:*"
            - "lambda:*"
            - "sts:*"
          Resource: "*"

functions:
  eventBridgeCheck:
    handler: src/eventBridgeCheck.handler
    environment:
      QUEUE_URL: ${construct:jobs.queueUrl}
  getAllUserLinks:
    handler: src/getAllUserLinks.handler
    events:
      - httpApi:
          path: /getAllLinks
          method: get
          authorizer:
            name: customAuthorizer
  linkRedirect:
    handler: src/linkRedirect.handler
    events:
      - httpApi:
          path: /redirect/{id}
          method: get
    environment:
      QUEUE_URL: ${construct:jobs.queueUrl}
  linkshorter:
    handler: src/linkShorter.handler
    events:
      - httpApi:
          path: /linkShorter
          method: post
          authorizer:
            name: customAuthorizer
  deleteLink:
    handler: src/deleteLink.handler
    events:
      - httpApi:
          path: /delete/{id}
          method: post
          authorizer:
            name: customAuthorizer
  verifyToken:
    handler: src/tokenValidation.handler
  addUser:
    handler: src/addUser.handler
    events:
      - httpApi:
          path: /register
          method: post
  generateTokens:
    handler: src/generateTokens.handler
    events:
      - httpApi:
          path: /auth
          method: post
  refreshToken:
    handler: src/refreshToken.handler
    events:
      - httpApi:
          path: /refresh
          method: post


constructs:
    jobs:
        type: queue
        worker:
            handler: src/sesSender.handler
        batchSize: 10

resources:
  Resources:
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UserTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userEmail
            AttributeType: S
        KeySchema:
          - AttributeName: userEmail
            KeyType: HASH
    UserTableTokens:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UserTableTokens
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userEmail
            AttributeType: S
        KeySchema:
          - AttributeName: userEmail
            KeyType: HASH
    ShortLinksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ShortLinksTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
    EventBridgeRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: scheduler-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - scheduler.amazonaws.com
                  - events.amazonaws.com
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: LambdaInvokeAccess
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource:
                    "*"
    EventBridgeRule:
      Type: AWS::Events::Rule
      Properties:
        EventPattern:
          source:
            - "deleteLink"
          detail-type:
            - "linkDeleter"
        Targets:
          - Arn: arn:aws:lambda:${self:provider.region}:${env:AWS_ID}:function:serverless-dev-eventBridgeCheck
            Id : EventBridge   

custom:
  scripts:
    hooks:
      "after:deploy:finalize": node verifyEmail.js

    

plugins:
  - serverless-auto-swagger
  - serverless-lift
  - serverless-dotenv-plugin
  - serverless-esbuild
